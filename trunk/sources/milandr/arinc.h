//
// Драйвер ARINC-429 для микроконтроллеров 1986ВЕ1Т фирмы Миландр.
//
// Драйвер работает без прерываний. Есть два режима работы:
// 1) С использованием Функций прямой записи arinc_write и прямого чтения arinc_read.
//    при использовании этих функций происходит запись (чтение) из FIFO
//    контроллера соответствующего канала ARINC-429. При успешном выполнении
//    операции возвращается 1, иначе 0.
// 2) С использованием функции опроса arinc_poll. При инициализации указывается
//    буфер в памяти для работы драйвера, в который либо осуществляется приём,
//    либо из которого происходит выдача меток.
//    При вызове функции arinc_poll, 
//    а) если канал настроен на передачу, то если FIFO пуста, происходит "перекачка"
//       меток из буфера в FIFO контроллера;
//    б) если канал настроен на приём, то принятые слова выбираются из FIFO контроллера
//       и располагаются в буфере по адресам, соответствующим меткам.
//    Пользователь располагает данные на передачу и забирает принятые данные из
//    буфера напрямую, без использования каких-либо функций. Необходимо помнить,
//    что если функция arinc_poll и обращения к буферу происходят в разных задачах,
//    то пользовательский код должен перед обращением в буфер захватить мьютекс
//    объявленный в структуре драйвера.
// Использовать два режима совместно крайне не рекомендуется.

#ifndef __ARINC_H__
#define __ARINC_H__

#include <kernel/uos.h>

//! Использовать бит паритета
#define ARINC_FLAG_PAR_EN 1

//! Паритет как дополнение до нечётности
#define ARINC_FLAG_PAR_ODD 2

//! Скорость передачи.
//! 0 - 100 кГц
//! 1 - 12,5 кГц
#define ARINC_FLAG_CLK_12_5kHz 4

#define ARINC_FLAG_RX 8

typedef struct 
{
	mutex_t lock;
	int chan;
	unsigned *buf;
	unsigned size;
	unsigned flags;
	
	unsigned labels;
	unsigned rx_errors;
} arinc_t;

//! Инициализация канала ARINC-429.
//! \param u Структура драйвера.
//! \param channel Номер канала (приёмника или передатчика). Каналы нумеруются от 0.
//! \param buf Буфер для хранения принятых или переданных меток. При использовании только
//! функций arinc_read и arinc_write (режим работы 1) не используется, можно указать 0.
//! \param bytes Размер буфера (в байтах) для хранения принятых или переданных меток. 
//! При использовании только функций arinc_read и arinc_write (режим работы 1) не 
//! используется, можно указать 0.
//! \param flags Флаги.
//! Смотри значения макросов ARINC_FLAG_<...> выше. Можно
//! комбинировать с помощью битового ИЛИ.
void arinc_init(arinc_t *u, int channel, void * buf, unsigned bytes, unsigned flags);

//! Инициализация ножек контроллера. Вызывать только после arinc_init!
//! \param u Структура драйвера.
void arinc_init_pins(arinc_t *u);

//! Выполняет запись 32-битного слова ARINC-429 для указанного передатчика.
//! \param u Структура драйвера.
//! \param msg Слово ARINC для передачи.
//! \return 1, если передача успешно выполнена; иначе 0.
int arinc_write(arinc_t *u, ARINC_msg_t msg);

//! Выполняет чтение 32-битного слова ARINC-429 для указанного приёмника.
//! \param u Структура драйвера.
//! \param [out] msg Указатель, по которому будет записано слово ARINC.
//! \return 1, если приём успешно выполнен; иначе 0.
int arinc_read(arinc_t *u, ARINC_msg_t *msg);

//! Функция опроса канала ARINC-429.
//! Использовать только в режиме работы 2!
//! \param u Структура драйвера.
void arinc_poll(arinc_t *u);


#endif
