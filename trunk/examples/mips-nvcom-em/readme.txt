Конфигурирование загрузки образа
--------------------------------

Конфигурирование загрузки осуществляется в файле target.cfg с помощью установки переменных окружения.

Возможны два варианта загрузки образа uOS с прикладной программой:
1) напрямую (STANDALONE), т.е. образ содержит необходимый код для своего развёртывания. Такой вариант применяется, если образ запускается и работает из флеш-памяти или если образ записывается в SDRAM через утилиту mdb.
2) с помощью загрузчика (NVBOOT). В этом случае образ должен быть пристыкован к образу загрузчика NVBOOT. NVBOOT запускается всегда из флеш-памяти при включении или перезапуске платы и может загрузить исполняемый код uOS как в SDRAM, так и в CRAM (в зависимости от настроек).
Вариант загрузки выбирается с помощью переменной LOADER, которая может принимать значения STANDALONE и NVBOOT, соответственно.

В режиме STANDALONE образ может быть собран в трёх вариантах:
1) для размещения кода во флеш-памяти необходимо установить переменную CODE_PLACE = FLASH. В этом случае образ будет собран так, что исполняемый код будет находится во флеш, и процессор будет выбирать команды из неё. Этот вариант удобен тем, что при программа хранится в энергонезависимой памяти и будет активироваться при подаче питания. Этот вариант также наименее затратный с точки зрения используемой памяти для кода, но и самый медленный из-за выборки команд из флеш-памяти. Хотя в случае, если размер образа <= 16 Кбайтам, и не установлен флаг FLUSH_CACHE_IN_EXCEPTION, то весь образ поместится в кэш-память и, соответственно, будет работать максимально быстро. 
Образ может быть записан в плату с помощью команды:
	make load
При этом на инструментальном компьютере должна быть установлена утилита mcprog.
2) для размещения кода в SDRAM необходимо установить переменную CODE_PLACE = SDRAM. В этом случае образ соберётся для запуска и работы в SDRAM. Он должен быть загружен в SDRAM с помощью JTAG. Для этого удобно использовать утилиту mdb. В директории есть примерный файл настроек load-elf.mdb, который содержит начальные установки регистров процессора и имя образа, который необходимо загрузить в плату. И то, и другое может быть изменено пользователем при необходимости. Загрузка и запуск образа осуществляется командой:
	mdb -u -f load-elf.mdb
Преимущество варианта: быстрая запись в плату, существенно более быстрая работа платы. Недостаток: образ "теряется" при выключении питания.
Этот вариант хорош для отладки программ.
3) для размещения кода в CRAM (память ОЗУ на кристалле) необходимо установить переменную CODE_PLACE = CRAM. Этот вариант пока не тестировался.

Загрузчик NVBOOT предоставляет возможность совмещения преимуществ различных вариантов: хранение образа в энергонезависимой флеш-памяти и более быстрая работа за счёт размещения кода в других типах памяти.
В режиме с загрузчиком NVBOOT возможны два варианта:
1) CODE_PLACE = SDRAM. Исполняемый код uOS загружается из флеш-памяти в SDRAM при включении платы.
2) CODE_PLACE = СRAM. В этом случае CRAM (ОЗУ на кристалле) делится на две части по 64К. Младшая часть используется под исполняемый код, который в неё загружает NVBOOT. Старшая часть используется в качестве ОЗУ для данных. Этот вариант самый быстрый по производительности, но очевиден его недостаток: только 64К для кода. Из-за этой проблемы даже некоторые тесты (test-snmp, test-telnetd) не получается собрать в этом варианте. Но при этом тесты TCP и UDP показывают практически полную загрузку шины Ethernet.

Вариант CODE_PLACE = FLASH при LOADER = NVBOOT избыточен и не используется.

После получения образа, предназначенного для загрузки с помощью NVBOOT, его нужно скопировать в директорию utils/nvboot. Дальнейшие действия описаны в файле readme.txt в этой директории.


Примечание. После любых изменений в target.cfg настоятельно рекомендуется очистка и пересборка проекта командой:
	make clean; make
