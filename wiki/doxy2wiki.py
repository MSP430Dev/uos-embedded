#!/usr/bin/python
# -*- coding: utf-8 -*-
# Read XML files, generated by Doxygen for a given uOS module.
# Generate a Google Wiki page for the module.

#import os
#import sys
import sys, string, getopt
import xml.dom.minidom

#
# Default options.
#
language = "en"
verbose = 0

#
# Data to be collected from doxygen.
#
module_name = "unknown"
module_brief = "Module \"" + module_name + "\""
module_descr = ""
module_files = []
module_functions = {}
module_defines = []
module_typedefs = []

#
# Fetch an element from XML compound structure.
# Return the first element with a given name,
# or empty string when not found.
#
def fetch_element (compound, name):
	try:	elem = compound.getElementsByTagName (name) [0]
	except:	return ""
	val = ""
	#print "elem = ", elem
	for line in elem.childNodes:
		#print "line = ", line, line.nodeType
		if line.nodeType == line.TEXT_NODE:
			#print "line value = ", line.nodeValue
			val = val + line.nodeValue
		else:
			for n in line.childNodes:
				#print "n value = ", n.nodeValue
				if n.nodeValue:
					val = val + n.nodeValue
	return string.strip (val)

def print_xml_element (elem):
	print elem.nodeName + ":",
	for c in elem.childNodes:
		print c.nodeName + ",",
	print "\n---"

#
# Read doxygen namespace XML file.
# Extract brief and detailed descriptions of a required module.
#
def parse_doxygen_namespace (filename):
	global module_brief, module_descr, module_name

	doc = xml.dom.minidom.parse("xml/" + filename + ".xml").documentElement
	if doc.tagName != "doxygen":
		raise SystemError, "Unknown file node (%s)" % doc.tagName

	for c in doc.getElementsByTagName ("compounddef"):
		if c.attributes["kind"].value != "namespace":
			continue
		name = fetch_element (c, "compoundname")
		if name != module_name:
			continue

		# Get brief and detailed descriptions of a module.
		brief = fetch_element (c, "briefdescription")
		if brief:
			if brief[-1:] == ".":
				brief = brief[:-1]
			module_brief = brief
		module_descr = fetch_element (c, "detaileddescription")

#
# Read doxygen XML file.
# Get documentation about functions, defines, typedefs.
#
def parse_doxygen_file (filename):
	global module_files

	if verbose: print >>sys.stderr, "*** File", filename
	doc = xml.dom.minidom.parse("xml/" + filename + ".xml").documentElement
	if doc.tagName != "doxygen":
		raise SystemError, "Unknown file node (%s)" % doc.tagName

	for c in doc.getElementsByTagName ("compounddef"):
		if c.attributes["kind"].value != "file":
			continue

		# Collect a list of file names
		elem = c.getElementsByTagName ("location")
		if elem:
			location = elem[0].attributes["file"].value
			n = location.find ("/trunk/");
			if n >= 0:
				location = location [n+7:]
			#print "*** Location: ", location
			module_files.append (location)

		# Get functions, defines, typedefs.
		for section in c.getElementsByTagName ("sectiondef"):
			if section.attributes["kind"].value == "func":
				for member in section.getElementsByTagName ("memberdef"):
					if member.attributes["static"].value != "no":
						continue
					name = fetch_element (member, "name")
					if name in module_functions:
						continue
					module_functions[name] = member
			elif section.attributes["kind"].value == "define":
				for member in section.getElementsByTagName ("memberdef"):
					module_defines.append (member)
			elif section.attributes["kind"].value == "typedef":
				for member in section.getElementsByTagName ("memberdef"):
					module_typedefs.append (member)

#
# File index.XML contains references to all other XML files.
# For all namespaces, call parse_doxygen_namespace().
# For all files, call parse_doxygen_file().
#
def parse_doxygen_index ():
	doc = xml.dom.minidom.parse("xml/index.xml").documentElement
	if doc.tagName != "doxygenindex":
		raise SystemError, "Unknown index file node (%s)" % doc.tagName
	compounds = doc.getElementsByTagName ("compound")

	namespaces = [node.attributes["refid"].value for node in compounds
		if node.attributes["kind"].value == "namespace"]
	for f in namespaces:
		parse_doxygen_namespace (f)

	files = [node.attributes["refid"].value for node in compounds
		if node.attributes["kind"].value == "file"]
	for f in files:
		parse_doxygen_file (f)

def build_wiki_page ():
	global module_files

	print "#summary [doxygen]", module_brief.encode('utf-8')
	print
	print "=", module_brief.encode('utf-8'), "="
	if module_descr:
		print module_descr.encode('utf-8')

	if module_defines:
		print "\n==", MSG_DEFINES, "=="
		for f in module_defines:
			name = fetch_element (f, "name")
			brief = fetch_element (f, "briefdescription")
			detailed = fetch_element (f, "detaileddescription")
			if not brief:
				brief = detailed
			print "||", name.encode('utf-8'), "||", brief.encode('utf-8'), "||"

	if module_typedefs:
		print "\n==", MSG_TYPEDEFS, "=="
		for f in module_typedefs:
			name = fetch_element (f, "name")
			definition = fetch_element (f, "definition")
			brief = fetch_element (f, "briefdescription")
			detailed = fetch_element (f, "detaileddescription")
			if not brief:
				brief = detailed
			print "||", name.encode('utf-8'), "||", definition.encode('utf-8'), "||", brief.encode('utf-8'), "||"

	if module_functions:
		print "\n==", MSG_FUNCTIONS, "=="
		for name in module_functions.keys():
			f = module_functions [name]
			brief = fetch_element (f, "briefdescription")
			detailed = fetch_element (f, "detaileddescription")
			print "\n===", name.encode('utf-8'), "==="
			print detailed.encode('utf-8')

	if module_files:
		print "\n==", MSG_FILES, "=="
		for f in module_files:
			print "[http://code.google.com/p/uos-embedded/source/browse/trunk/" + f,
			print f + "]"

def usage ():
	print """doxy2wiki.py: Create wiki page from Doxygen XML data.

Usage:
	doxy2wiki.py [-v] [-l language] <module>...
Options:
	-v           verbose mode
	-l           language: en, ru, etc.
         <module>    name of module
"""

try:
	opts, args = getopt.getopt (sys.argv[1:], "hl:v", ["help", "language="])
except getopt.GetoptError:
	usage()
	sys.exit(2)
for opt, arg in opts:
	if opt in ("-h", "--help"):
		usage()
		sys.exit()

	elif opt == '-v':
		verbose = 1

	elif opt in ("-l", "--language"):
		language = arg

if args == []:
	usage()
	sys.exit(2)

#
# Localization.
#
if language == "ru":
	MSG_DEFINES   = "Макросы"
	MSG_TYPEDEFS  = "Определения типов"
	MSG_FUNCTIONS =	"Функции"
	MSG_FILES     = "Файлы"
else:
	MSG_DEFINES   = "Defines"
	MSG_TYPEDEFS  = "Typedefs"
	MSG_FUNCTIONS =	"Functions"
	MSG_FILES     = "Files"

for module_name in args:
	module_brief = "Module \"" + module_name + "\""
	module_descr = ""
	module_files = []
	module_functions = {}
	module_defines = []
	module_typedefs = []
	parse_doxygen_index ()
	build_wiki_page()
