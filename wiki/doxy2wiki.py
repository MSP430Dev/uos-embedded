#!/usr/bin/python
# Read XML files, generated by Doxygen for a given uOS module.
# Generate a Google Wiki page for the module.

#import os
#import sys
import string
import xml.dom.minidom

#
# Data to be collected from doxygen.
#
module_name = "timer"
module_brief = "Module \"" + module_name + "\""
module_descr = ""

#
# Fetch an element from XML compound structure.
# Return the first element with a given name,
# or empty string whennot found.
#
def fetch_element (compound, name):
	try:	elem = compound.getElementsByTagName (name) [0]
	except:	return ""
	val = ""
	#print "elem = ", elem
	for line in elem.childNodes:
		#print "line = ", line, line.nodeType
		if line.nodeType == line.TEXT_NODE:
			#print "line value = ", line.nodeValue
			val = val + line.nodeValue
		else:
			for n in line.childNodes:
				#print "n value = ", n.nodeValue
				val = val + n.nodeValue
	return string.strip (val)

#
# Get brief and detailed descriptions of a module.
#
def parse_namespace (c):
	global module_brief, module_descr

	name = fetch_element (c, "compoundname")
	#print "Namespace:", name
	if name != module_name:
		raise SystemError, "Namespace name '" + name +\
			"' differs from module name '" + module_name + "'"
	brief = fetch_element (c, "briefdescription")
	if brief:
		#print "Brief: ", brief
		if brief[-1:] == ".":
			brief = brief[:-1]
		module_brief = brief
	module_descr = fetch_element (c, "detaileddescription")
	#print "Description: ", module_descr

#
# Read doxygen data file.
#
def parse_doxygen_file (filename):
	print "File", filename
	doc = xml.dom.minidom.parse("xml/" + filename + ".xml").documentElement
	if doc.tagName != "doxygen":
		raise SystemError, "Unknown file node (%s)" % doc.tagName

	compounds = doc.getElementsByTagName ("compounddef")
	for c in compounds:
		if c.attributes["kind"].value == "file":
			print filename + ": file", c
			parse_file (c)
		elif c.attributes["kind"].value == "page":
			print filename + ": page", c
		elif c.attributes["kind"].value == "dir":
			print filename + ": dir", c
		elif c.attributes["kind"].value == "namespace":
			parse_namespace (c)
		else:
			raise SystemError, "Unrecognised compound type (%s)" % c.attributes["kind"].value

#
# Read doxygen index file, and for all file references,
# call parse_doxygen_file().
#
def parse_doxygen_index ():
	doc = xml.dom.minidom.parse("xml/index.xml").documentElement
	if doc.tagName != "doxygenindex":
		raise SystemError, "Unknown index file node (%s)" % doc.tagName

	compounds = doc.getElementsByTagName ("compound")
	namespaces = [node.attributes["refid"].value for node in compounds
		if node.attributes["kind"].value == "namespace"]
	for f in namespaces:
		parse_doxygen_file (f)

	files = [node.attributes["refid"].value for node in compounds
		if node.attributes["kind"].value == "file"]
	for f in files:
		parse_doxygen_file (f)

def print_wiki_page ():
	print "#summary [doxygen]", module_brief
	print
	print "=", module_brief, "="
	if module_descr:
		print module_descr

parse_doxygen_index ()
print_wiki_page()
