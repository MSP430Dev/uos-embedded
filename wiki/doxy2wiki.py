#!/usr/bin/python
# -*- coding: utf-8 -*-
# Read XML files, generated by Doxygen for a given uOS module.
# Generate a Google Wiki page for the module.

#import os
#import sys
import sys, string, getopt
import xml.dom.minidom

verbose = 0

#
# Data to be collected from doxygen.
#
module_name = "unknown"
module_brief = "Module \"" + module_name + "\""
module_descr = ""
module_files = []

#
# Fetch an element from XML compound structure.
# Return the first element with a given name,
# or empty string when not found.
#
def fetch_element (compound, name):
	try:	elem = compound.getElementsByTagName (name) [0]
	except:	return ""
	val = ""
	#print "elem = ", elem
	for line in elem.childNodes:
		#print "line = ", line, line.nodeType
		if line.nodeType == line.TEXT_NODE:
			#print "line value = ", line.nodeValue
			val = val + line.nodeValue
		else:
			for n in line.childNodes:
				#print "n value = ", n.nodeValue
				val = val + n.nodeValue
	return string.strip (val)

def print_xml_element (elem):
	print elem.nodeName + ":",
	for c in elem.childNodes:
		print c.nodeName + ",",
	print "\n---"

#
# Get documentation from a file structure.
#
def parse_file (c):
	global module_files

	if verbose:
		print "*** File ",
		print_xml_element (c)

	# Collect a list of file names
	elem = c.getElementsByTagName ("location")
	if elem:
		location = elem[0].attributes["file"].value
		n = location.find ("/trunk/");
		if n >= 0:
			location = location [n+7:]
		#print "*** Location: ", location
		module_files.append (location)

	elem = c.getElementsByTagName ("sectiondef")
	if elem and elem[0].attributes["kind"].value == "func":
		funcs = elem[0].childNodes
		if verbose:
			for f in funcs:
				print f.nodeValue,
			print

#
# Read doxygen namespace XML file.
# Extract brief and detailed descriptions of a required module.
#
def parse_doxygen_namespace (filename):
	global module_brief, module_descr, module_name

	doc = xml.dom.minidom.parse("xml/" + filename + ".xml").documentElement
	if doc.tagName != "doxygen":
		raise SystemError, "Unknown file node (%s)" % doc.tagName

	compounds = doc.getElementsByTagName ("compounddef")
	for c in compounds:
		if c.attributes["kind"].value != "namespace":
			continue
		name = fetch_element (c, "compoundname")
		if name != module_name:
			continue

		# Get brief and detailed descriptions of a module.
		brief = fetch_element (c, "briefdescription")
		if brief:
			if brief[-1:] == ".":
				brief = brief[:-1]
			module_brief = brief
		module_descr = fetch_element (c, "detaileddescription")

#
# Read doxygen XML file.
#
def parse_doxygen_file (filename):
	if verbose: print "File", filename
	doc = xml.dom.minidom.parse("xml/" + filename + ".xml").documentElement
	if doc.tagName != "doxygen":
		raise SystemError, "Unknown file node (%s)" % doc.tagName

	compounds = doc.getElementsByTagName ("compounddef")
	for c in compounds:
		if c.attributes["kind"].value == "file":
			if verbose: print filename + ": file", c
			parse_file (c)
		elif c.attributes["kind"].value == "page":
			if verbose: print filename + ": page", c
		elif c.attributes["kind"].value == "dir":
			if verbose: print filename + ": dir", c
		else:
			raise SystemError, "Unrecognised compound type (%s)" % c.attributes["kind"].value

#
# File index.XML contains references to all other XML files.
# For all namespaces, call parse_doxygen_namespace().
# For all files, call parse_doxygen_file().
#
def parse_doxygen_index ():
	doc = xml.dom.minidom.parse("xml/index.xml").documentElement
	if doc.tagName != "doxygenindex":
		raise SystemError, "Unknown index file node (%s)" % doc.tagName
	compounds = doc.getElementsByTagName ("compound")

	namespaces = [node.attributes["refid"].value for node in compounds
		if node.attributes["kind"].value == "namespace"]
	for f in namespaces:
		parse_doxygen_namespace (f)

	files = [node.attributes["refid"].value for node in compounds
		if node.attributes["kind"].value == "file"]
	for f in files:
		parse_doxygen_file (f)

def build_wiki_page ():
	global module_files

	print "#summary [doxygen]", module_brief
	print
	print "=", module_brief, "="
	if module_descr:
		print module_descr

	if module_files:
		print "\n== Файлы =="
		for f in module_files:
			print "[http://code.google.com/p/uos-embedded/source/browse/trunk/" + f,
			print f + "]"

def usage ():
	print """doxy2wiki.py: Create wiki page from Doxygen XML data.

Usage:
	doxy2wiki.py [-v] <module>...
Options:
	-v           verbose mode
         <module>    name of module
"""

try:
	opts, args = getopt.getopt (sys.argv[1:], "hp:v", ["help", "parameter="])
except getopt.GetoptError:
	usage()
	sys.exit(2)
for opt, arg in opts:
	if opt in ("-h", "--help"):
		usage()
		sys.exit()
	elif opt == '-v':
		verbose = 1
	elif opt in ("-p", "--parameter"):
		parameter = arg

if args == []:
	usage()
	sys.exit(2)

for module_name in args:
	module_brief = "Module \"" + module_name + "\""
	module_descr = ""
	module_files = []
	parse_doxygen_index ()
	build_wiki_page()
