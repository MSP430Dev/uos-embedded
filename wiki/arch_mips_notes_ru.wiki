= Особенности архитектуры MIPS =

Особенности ассемблера GNU as для MIPS: http://sourceware.org/binutils/docs/as/MIPS_002dDependent.html

Распределение регистров MIPS:
|| *Регистр* || *Номер* || *Применение* ||
|| $zero     || 0       || Константа 0 ||
|| $at 	     || 1       || Используется ассемблером для псевдокоманд ||
|| $v0...$v1 || 2...3   || Результат функции, вычисление выражений ||
|| $a0...$a3 || 4...7   || Аргументы функции ||
|| $t0...$t7 || 8...15  || Несохраняемые регистры ||
|| $s0...$s7 || 16...23 || Сохраняемые регистры ||
|| $t8...$t9 || 24...25 || Несохраняемые регистры ||
|| $k0...$k1 || 26...27 || Используются обработчиком иключений и прерываний ||
|| $gp 	     || 28      || Указатель на сегмент данных ||
|| $sp 	     || 29      || Указатель стека ||
|| $fp 	     || 30      || Указатель фрейма функции ||
|| $ra 	     || 31      || Адрес возврата ||

При вызове функции первые четыре параметра передаются в регистрах $a0...$a3.
Остальные помещаются в стек в обратном порядке, последний параметр имеет
больший адрес. Функция возвращает значение в регистре $v0 или регистрах
$v0...$v1 (в случае `long long` или `double`).

Параметры оператора `asm`:
|| *Символ* || *Режим MIPS*                     ||
||  r       || Целочисленный регистр		||
||  f       || Регистр с плавающей точкой	||
||  i       || Константа целого типа		||
||  I       || Знаковая 16-битная константа     ||
||  K       || Беззнаковая 16-битная константа  ||
||  L       || Знаковая 32-битная константа, в которой младшие 16 бит равны 0 (для lui) ||
||  N       || Константа в диапазоне -65535...-1 ||
||  O       || Знаковая 15-битная константа     ||
||  P       || Константа в диапазоне 1...65535  ||

Подробнее здесь: http://gcc.gnu.org/onlinedocs/gcc/Constraints.html

При прерывании, состояние регистров сохраняется в стеке текущей задачи. Всего 36 слов или 144 байта:
|| *Стек* ||
||  ---   ||
||  ---   || <--- Значение $sp до прерывания ||
||  EPC   ||
|| STATUS ||
||  HI    ||
||  LO    ||
||  $ra   ||
||  $fp   ||
||  $gp   ||
||  $25   ||
||  $24   ||
||  ...   ||
||  $1    || 
||  arg4  || Стандартный фрейм MIPS API... ||
||  arg3  || ...место для аргументов... ||
||  arg2  || ...передаваемых в регистрах ||
||  arg1  || <--- Новое значение $sp ||
||  ---   ||

== Время входа в прерывание ==

Показана латентность прерываний, измеренная тестом test_latency.c на платах MC-24R_EM и NVCom_EM, без использования FPU.

|| *Процессор, частота* || *Без кэша данных* || *С кэшом данных*  ||
|| MC-24RT3, 60 МГц     ||  ||  ||
|| NVCom-01, 60 МГц     ||  ||  ||
|| NVCom-01, 290 МГц    || 9.58 - 9.88 мксек || 0.82 - 0.83 мксек ||

== Время переключения задач ==

Показано время переключения задач, измеренное тестом test_tswitch.c на платах MC-24R_EM и NVCom_EM, без использования FPU.

|| *Процессор, частота* || *Без кэша данных*   || *С кэшом данных* ||
|| MC-24RT3, 60 МГц     ||  ||  ||
|| NVCom-01, 60 МГц     ||  ||  ||
|| NVCom-01, 290 МГц    || 21.49 - 21.60 мксек || 1.34 мксек       ||