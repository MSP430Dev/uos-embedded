#summary Success story: porting uOS to Elvees Multicore MIPS32 architecture

= Микроконтроллеры Элвис Мультикор =
Описана последовательность работ по переносу системы uOS на архитектуру MIPS32,
применительно к микроконтроллеру MC-24 семейства Элвис Мультикор.

Скалярное ядро процессоров Элвис Мультикор имеет архитектуру MIPS32,
которая не поддерживается операционной системой uOS.
В первую очередь требуется реализация машинно-зависимой части микроядра для архитектуры
MIPS32. Затем необходимо реализовать работу с периферийными устройствами:
инициализацию, таймер, UART и т.д.

=== 1. Создаём каталог целевой платформы ===
Создаем каталог uos/targets/mc24. Помещаем туда файлы, необходимые для компиляции.
{{{
mkdir uos/targets/mc24
cd uos/targets/mc24
cp ../s3c4530/Makefile .
cp ../s3c4530/target.cfg .
cp ../s3c4530/ldscript.x .
}}}

В файле target.cfg изменяем значения переменных:
  * ARCH - mips32
  * MODULES - необходимо убрать s3c4530 и добавить elvees - имя каталога, в котором будут находиться драйверы для нового процессора.
  * CFLAGS - задаем тип платформы -DMIPS32 и модель конкретного микроконтроллера -DELVEES_MC24.

В переменной BINDIR устанавливаем правильный путь к компилятору, в моём случае это
/usr/local/mipsel432/bin.
В переменных CC, AR и прочих устанавливаем имена компонентов компилятора:
mipsel-elf32-gcc и т.п.

В файле ldscript.x заменяем везде arm на mips,
а также в блоке MEMORY изменяем адреса и длины сегментов памяти:
  * Для text устанавливаем ORIGIN = 0xbfc00000, LENGTH = 2M
  * Для data устанавливаем ORIGIN = 0xb8000000, LENGTH = 32K

... TODO ...

=== 2. Создаем файлы заголовков для AT91SAM ===
Добавляем файлы заголовков для всех моделей семейства SAM: от `at91sam7a3.h`
до `at91sam9xe512.h`. Эти файлы можно переписать из каталога
"C:\Program Files\AT91-ISP v1.9\SAM-BA v2.5\monitors\" после установки
пакета "Install AT91-ISP v1.9.exe". Размещаем их в каталоге
uos/sources/runtime/arm/. Для удобства переименовываем строчными буквами.

Создаем файл uos/sources/runtime/arm/io-at91sam.h:
{{{
#ifdef ARM_AT91SAM7A3
#include <runtime/arm/at91sam7a3.h>
#endif
#ifdef ARM_AT91SAM7S128
#include <runtime/arm/at91sam7s128.h>
#endif
... и так далее ...
}}}

В файле uos/sources/runtime/arm/io.h добавляем строки:
{{{
#ifdef ARM_AT91SAM
#include <runtime/arm/io-at91sam.h>
#endif
}}}

=== 3. Инициализируем начальное состояние микроконтроллера ===
В файле uos/sources/runtime/arm/init.c в функции `_init_()` добавляем
код инициализации начального состояния регистров микроконтроллера.
Заключаем его в #ifdef ARM_AT91SAM ... #endif.

=== 4. Делаем функции отладочной выдачи на консоль ===
В файле uos/sources/runtime/arm/debug.c добавляем функции отладочной
выдачи на консоль: `debug_putchar()`, `debug_getchar()`, `debug_peekchar()`.
Заключаем их в #ifdef ARM_AT91SAM ... #endif.

=== 5. Добавляем обработку прерываний ===
В файле uos/sources/kernel/arm/machdep.c в функциях `_irq_handler_()` и
`arm_intr_allow()` добавляем работу с регистрами контроллера прерываний.
Заключаем его в #ifdef ARM_AT91SAM ... #endif.

=== 6. Обрабатываем таймер ===
В файле uos/sources/timer/timer.c добавляем инициализацию регистров таймера.