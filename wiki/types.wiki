#summary Description of runtime types

= Базовые целочисленные типы =

В файле runtime/lib.h определён ряд целочисленных типов данных.
Основное их предназначение - помощь програмисту в создании переносимых программ.

== Целые типы фиксированного размера ==
Размер этих типов жестко задан и не зависит от архитектуры целевого процессора.
Их рекомендуется использовать в структурах данных, а также при вычислениях,
если результат зависит от количества разрядов.

 * int8_t -- 8 бит, со знаком
 * uint8_t -- 8 бит, без знака
 * int16_t -- 16 бит, со знаком
 * uint16_t -- 16 бит, без знака
 * int32_t -- 32 бит, со знаком
 * uint32_t -- 32 бит, без знака
 * int64_t -- 64 бит, со знаком
 * uint64_t -- 64 бит, без знака

Типы int8_t, uint8_t, int16_t и uint16_t не очень актуальны, так как вместо них
можно использовать стандартные signed char, unsigned char, signed short и
unsigned short соответственно.

== Целые типы нежесткого размера ==
На некоторых RISC-архитектурах (например ARM) работа со однобайтными или
двухбайтными значениями требует большего количества машинных инструкций,
чем для типа int. При простой обработке, например для счетчика цикла,
рекоментуется применять следующие типы. Они задают наиболее оптимальные
для целевого процессора значения, имеющие нужное число разрядов (или больше).

Эти типы рекомендуется применять в случаях, когда точный размер целого
числа не имеет большого значения.

 * small_int_t -- не менее 8 бит, со знаком
 * small_uint_t -- не менее 8 бит, без знака
 * bool_t -- достаточный для хранения значений 0 и 1, со знаком

Если требуется целочисленный тип, обеспечивающий не менее 16 бит, следует использовать
обычный int или unsigned int.

Если требуется тип, обеспечивающий не менее 32 бит, следует использовать
int32_t или uint32_t.

== Сравнение для разных архитектур ==
|| *Тип*        || *AVR*              || *MSP430*           || *ARM*               || *i386*             || *ia64*         ||
|| int8_t       || signed char        || signed char        || signed char         || signed char        || signed char    ||
|| uint8_t      || unsigned char      || unsigned char      || unsigned char       || unsigned char      || unsigned char  ||
|| int16_t      || int                || int                || short               || short              || short          ||
|| uint16_t     || unsigned int       || unsigned int       || unsigned short      || unsigned short     || unsigned short ||
|| int32_t      || long               || long               || int                 || int                || int            ||
|| uint32_t     || unsigned long      || unsigned long      || unsigned int        || unsigned int       || unsigned int   ||
|| int64_t      || long long          || long long          || long long           || long long          || long           ||
|| uint64_t     || unsigned long long || unsigned long long || unsigned long long  || unsigned long long || unsigned long  ||
|| small_int_t  || int8_t             || int16_t            || int32_t             || int32_t            || int32_t        ||
|| small_uint_t || uint8_t            || uint16_t           || uint32_t            || uint32_t           || uint32_t       ||
|| bool_t          || int8_t         || int16_t            || int32_t             || int32_t            || int32_t        ||