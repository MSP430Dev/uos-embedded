#summary Target board: Milandr 1986VE91.

[http://milandr.ru/index.php?mact=Products,cntnt01,details,0&cntnt01productid=67&cntnt01returnid=68 http://uos-embedded.googlecode.com/svn/wiki/images/milandr-ve91-board.jpg]

[http://milandr.ru/index.php?mact=Products,cntnt01,details,0&cntnt01productid=67&cntnt01returnid=68 Отладочный комплект]
для микроконтроллера [http://milandr.ru/index.php?mact=Products,cntnt01,details,0&cntnt01productid=13&cntnt01returnid=68 1986ВЕ91Т]
([http://milandr.ru/uploads/Products/product_80/spec_seriya_1986BE.rar спецификация]).
Архитектура Cortex M3, система команд
[http://ru.wikipedia.org/wiki/ARM_(%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0)#Thumb-2 Thumb-2]. Возможна установка дополнительных плат, например [board_milandr_bg1_ru модуля Ethernet на базе микросхемы 5600ВГ1У].

Память:
 * 32 килобайта внутренней памяти данных.
 * 128 килобайт внутренней flash-памяти команд.

Задающий генератор 8 МГц. Установкой регистра PLL_CONTROL частота может быть умножена до 80 МГц.

Загрузка прошивки производится посредством утилиты
[http://code.google.com/p/milprog/wiki/milprog_ru milprog] и адаптера
[http://www.olimex.com/dev/arm-usb-tiny.html Olimex ARM-USB-Tiny].
Адаптер необходимо подключить к порту JTAG B отладочной платы.
Для нормальной работы переключатели SW1 и SW2 должны находиться в нулевом положении (оба влево). При прошивке необходимо перевести переключатель SW2 (нижний) в положение 1 (вправо).

Карта памяти:
|| *Тип*     || *Начало*  || *Конец*   || *Объем* ||
|| Flash ROM ||`0800 0000`||`0801 ffff`|| 128 kb  ||
|| RAM       ||`2000 0000`||`2000 7fff`|| 32 kb   ||

Расположение разъёмов и джамперов показано на рисунке:

[http://code.google.com/p/uos-embedded/wiki/board_be91_connectors_ru http://uos-embedded.googlecode.com/svn/wiki/images/ve91-jumpers-small.gif]

Режим работы микроконтроллера:
|| *SW1 (верхний)* || *SW2 (нижний)* || *Стартовый адрес*      || *Отладка* ||
||  0          ||  0           || 0х0800 0000 (flash-память)   || JTAG B ||
||  1 (вправо) ||  0           || 0х0800 0000 (flash-память)   || JTAG A ||
||  0          ||  1  (вправо) || 0х1000 0000 (внешняя память) || JTAG B ||
||  1 (вправо) ||  1  (вправо) || 0х1000 0000 (внешняя память) || JTAG заблокирован ||

= Примеры uOS =
В каталоге [http://code.google.com/p/uos-embedded/source/browse/trunk/examples/mips32-mc24em examples/mips32-mc24em]
находятся примеры сборки uOS для MC-24EM. Их можно скомпилировать командой "make". Загрузить готовые бинарные файлы в плату можно утилитой [http://code.google.com/p/mcprog/ mcprog], например:
{{{
mcprog -w test_tcl.bin
}}} 

= Тесты =
[http://code.google.com/p/uos-embedded/source/browse/trunk/examples/mips32-mc24em/test_debug.c test_debug.c]
- Проверка runtime-библиотеки и отладочной печати. Микроядро отсутствует.
Программа циклически выдаёт на консоль строку "Hello, World!" и ждёт нажатия клавиши.

[http://code.google.com/p/uos-embedded/source/browse/trunk/examples/mips32-mc24em/test_task.c test_task.c]
- Проверка переключения задач. Одна задача пользователя, циклически печатающая свой
общий размер стека и размер свободной части, затем ждущая нажатия клавиши.

[http://code.google.com/p/uos-embedded/source/browse/trunk/examples/mips32-mc24em/test_timer.c test_timer.c]
- Проверка драйвера таймера. Одна задача: программа пользователя, которая
каждые 100 миллисекунд печатает строку на консоли.

[http://code.google.com/p/uos-embedded/source/browse/trunk/examples/mips32-mc24em/test_uart.c test_uart.c]
- Проверка драйвера UART. Две задачи: драйвер UART и программа пользователя,
циклически выдающая строку "Hello, World!" и ждущая нажатия клавиши.

[http://code.google.com/p/uos-embedded/source/browse/trunk/examples/mips32-mc24em/philosophers.c philosophers.c]
- Пять обедающих философов. Шесть задач: драйвер UART и пять задач философов.

[http://code.google.com/p/uos-embedded/source/browse/trunk/examples/mips32-mc24em/test_ram.c test_ram.c]
- Проверка внешней оперативной памяти SDRAM. Задача пользователя с простым диалоговым меню.
Позволяет запускать:
 * Тест адресных сигналов (бегущая единица). Запись данных по специально подобранным адресам и проверка.
 * Тест одного адреса. Циклическая запись по фиксированному адресу данных AAAA и 5555, с проверкой.
 * Тест всей внешней памяти. Запись данных AAAA и 5555, с проверкой.
{{{
Testing memory on MC-24EM board
Generator 8.0 MHz, CPU clock 80.0 MHz
  CSR    = 000100A1
  CSCON0 = 00B000F8
  CSCON3 = 00080000
  SDRCON = 00072710

  1. Test SRAM address signals
  2. Test SRAM address BFCAAAA8
  3. Test all SRAM (1024 kbytes)
  4. Test SDRAM address signals
  5. Test SDRAM address A2AAAAA8
  6. Test SDRAM address A5555554
  7. Test all SDRAM (128 Mbytes)

Command: _
}}}

[http://code.google.com/p/uos-embedded/source/browse/trunk/examples/mips32-mc24em/test_tcl.c test_tcl.c]
- Проверка реализации встроенного языка TCL. Выдаёт диалоговое приглашение:
{{{
Embedded TCL
~~~~~~~~~~~~
Free static memory: 956812 bytes
Free dynamic memory: 134217728 bytes

Enter "help" for a list of commands

% _
}}}
В качестве примера реализованы три дополнительные команды:
|| loop var first limit {incr} command  || Цикл от var:=first до limit с шаком incr ||
|| echo {arg...}                        || Выдача аргументов через пробел ||
|| mem                                  || Выдача количества свободной памяти и списка задач ||

Пример списка задач:
{{{
% mem

Task     Address          Prio   Stack          Space    Msg    Ticks
idle     b80001dc         0      b8007f10       1       (nil)   20
console  b800032c        *20     b8000770       748     (nil)   365
uartr    b8000ba4         90     b8000eb8       676     (nil)   402
        Waiting for 0xb8000b30

% _
}}}