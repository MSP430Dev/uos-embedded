#summary uOS coding style, draft

= Стиль кодирования =
Этот документ описывает стиль кодирования, принятый в проекте uOS.
Пожалуйста, старайтесь следовать этим рекомендациям, чтобы
поддерживать качество кода.

**Помните!** Код чаще приходится читать, чем писать, поэтому
понятность и чистота кода гораздо важнее скорости набора.

== Идентификаторы ==
Выбирайте имена, которые ясно и четко описывают предназначение и/или смысл
сущности. Старайтесь не использовать сокращения лишний раз, помните о тех,
кто читает код.

Используйте подчеркивание для отделения слов внутри идентификаторов,
это существенно облегчает чтение.

Не используйте малопонятные префиксы или суффиксы (например,
венгерскую нотацию).

Используйте 0 вместо NULL.

Правильно:
{{{
void function (string my_string)
}}}
Неправильно:
{{{
void function (string myArgument)

void function (string lpstrArgument)
}}}

=== Переменные ===
Имена переменных и полей структур должны состоять из строчных букв.
Если имя состоит из нескольких слов, они должны разделяться подчеркиванием,
как "red_push_button".
Не используйте суффиксы или префиксы "`_`", "`m_`" и подобные.

Локальные имена переменных лучше делать короткими.

=== Константы ===
Для констант применяйте имена из заглавных букв. Слова разделяйте
подчеркиванием, например "MAX_CHILDREN".

=== Функции и методы ===
Имена функций языка Си состоят из строчных букв (стиль GNU). Слова разделяются подчеркиванием, например "task_create".

В именах методов Си++ первая буква слова должны быть заглавная, остальные - строчные (стиль Ada). Слова разделяются подчеркиванием, например "Create_Top_Window".

=== Типы, классы и интерфейсы ===
Имена типов, классов и интерфейсов создаются аналогично функциям,
но с добавлением суффикса "_t":
{{{
typedef unsigned long address_t;
}}}

== Отступы ==
Используйте 8-символьную табуляцию, а не пробелы для отступов.
Если правите чужой код - старайтесь придерживаться авторского стиля.

Избегайте строк длиннее 78 символов, переносите инструкцию на другую
строку при необходимости. При переносе части кода на другую строку вторая
последующая строки должны быть отбиты вправо на один отступ (табуляцию).

Не размещайте несколько инструкций на одной строке.
Каждая инструкция должна начинаться с новой строки.

Для уменьшения уровня вложенности кода используйте операторы
continue или break. Например, вместо:
{{{
for (i = 0; i < 10; i++) {
	if (something (i)) {
		do_more ();
	}
}
}}}
лучше сделать так:
{{{
for (i = 0; i < 10; i++) {
	if (! something (i))
		continue;
	do_more ();
}
}}}

Метки оператора switch размещайте на том же уровне:
{{{
switch (x) {
case 'a':
	...
case 'b':
	...
}
}}}

== Пробелы ==
Ставьте пробел перед открывающей скобкой при вызове функции или
индексировании массива, например:
{{{
function (a);
b [10];
}}}

Не ставьте пробел после открывающей или перед закрывающей скобкой. Правильно:
{{{
function (a);	array [10];
}}}
Неправильно:
{{{
function ( a );	array[ 10 ];
}}}

В операторах ставьте открывающую фигурную скобку на той же строке.
Правильно:
{{{
if (a) {
	Code ();
	Code ();
}
}}}
Неправильно:
{{{
if (a)
{
	Code ();
	Code ();
}
}}}

При объявлении функции располагайте фигурные скобки с новой строки.
Правильно:
{{{
void function ()
{
}
}}}
Неправильно:
{{{
void function () {
}
}}}

Не экономьте пробелы в выражениях.
Правильно:
{{{
if (a + 5 > function (blah () + 4))
}}}
Неправильно:
{{{
if (a+5>function(blah()+4))
}}}

== Файлы ==
Во всех файлах вначале делайте краткое описание.
Добавляйте ссылку на лицензию. Например:
{{{
/*
 * Handle comments in System files.
 *
 * Author: Juan Perez (juan@address.com)
 * Copyright (C) 2002 Address, Inc
 *
 * This file is distributed ...
 * ... licence ...
 */
}}}

Если Вы изменяете чужой код и вносите существенный вклад,
пожалуйста добавьте себя к списку авторов.

=== Имена файлов ===
Файлы должны иметь следующие расширения:
|| *Язык*              || *Расширение* ||
|| Заголовки Си, Си++  ||  .h          ||
|| Код Cи              ||  .с          ||
|| Код Си++            ||  .сpp        ||
|| Заголовки Ada       ||  .ads        ||
|| Код Ada             ||  .adb        ||

Имена файлов Си, а также каталогов, должны состоять из строчных букв.
Имена файлов Си++ и Ada должны начинаться
с заглавной буквы (стиль Ada).

=== Файлы заголовков ===
Файлы заголовков Си должны содержать защитное обрамление:
{{{
#ifndef MODULE_CLASSNAME_H
#define MODULE_CLASSNAME_H
#ifdef __cplusplus
extern "C" {
#endif

...

#ifdef __cplusplus
}
#endif
#endif
}}}

Файлы заголовков Си++ должны включаться в код с помощью конструкции
"#import", поэтому для них защитное обрамление не требуется.